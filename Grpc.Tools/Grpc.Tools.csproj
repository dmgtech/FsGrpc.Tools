<Project Sdk="Microsoft.NET.Sdk" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <AssemblyName>Protobuf.MSBuild</AssemblyName>
    <VersionPrefix>$(GrpcFsharpVersion)</VersionPrefix>
    <!-- If changing targets, change also paths in Google.Protobuf.Tools.targets. -->
    <TargetFrameworks>net6.0</TargetFrameworks>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <!--Import Project="SourceLink.csproj.include" /-->

  <PropertyGroup Label="Asset root folders">
    <!-- TODO(kkm): Rework whole section when splitting packages.  -->
    <!-- GRPC: ../../third_party/protobuf/src/google/protobuf/  -->
    <!-- GPB:  ../src/google/protobuf/ -->
    <Assets_ProtoInclude>../google/protobuf/</Assets_ProtoInclude>

    <!-- GPB:  ../protoc/ -->
    <!-- GRPC: ../protoc_plugins/protoc_ -->
    <Assets_ProtoCompiler>../protoc_plugins/protoc_</Assets_ProtoCompiler>

    <!-- GRPC: ../protoc_plugins/ -->
    <Assets_GrpcPlugins>../protoc_plugins/</Assets_GrpcPlugins>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' != 'net45' ">
    <DefineConstants>$(DefineConstants);NETCORE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Label="NuGet package definition" Condition=" '$(Configuration)' == 'Release' ">
    <!-- TODO(kkm): Change to "build\" after splitting. -->
    <BuildOutputTargetFolder>build\_protobuf\</BuildOutputTargetFolder>
    <DevelopmentDependency>true</DevelopmentDependency>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <PackageId>FsGrpc.Tools</PackageId>
    
    <IsPackable>true</IsPackable>
    <Authors>The gRPC Authors</Authors>
    <Copyright>Copyright 2018 The gRPC Authors</Copyright>
    <Description>gRPC and Protocol Buffer compiler for F# projects</Description>
    <!--PackageIcon>packageIcon.png</PackageIcon-->
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/grpc/grpc</PackageProjectUrl>
    <PackageTags>gRPC RPC HTTP/2</PackageTags>
    <PackageReadmeFile>README.md</PackageReadmeFile>
	  <GenerateDependencyFile>true</GenerateDependencyFile>
    	<!-- This target will run when MSBuild is collecting the files to be packaged, and we'll implement it below. This property controls the dependency list for this packaging process, so by adding our custom property we hook ourselves into the process in a supported way. -->
    <TargetsForTfmSpecificBuildOutput>
      $(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage
    </TargetsForTfmSpecificBuildOutput>
    <!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
    <!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
    <NoWarn>NU5100</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <!--None Include="../packageIcon.png" Pack="true" PackagePath="\"/-->
    <None Include="README.md" Pack="true" PackagePath="\"/>
  </ItemGroup>

  <ItemGroup Label="NuGet package assets">
    <None Pack="true" PackagePath="build\" Include="build\**\*.xml; build\**\*.props; build\**\*.targets;" />

    <!-- Protobuf assets (for Google.Protobuf.Tools) -->
    <_ProtoAssetName Include="any;api;descriptor;duration;empty;field_mask;
                              source_context;struct;timestamp;type;wrappers" />
    <_Asset PackagePath="build/native/include/google/protobuf/" Include="@(_ProtoAssetName->'$(Assets_ProtoInclude)%(Identity).proto')" />

    <!-- TODO(kkm): GPB builds assets into "macosx", GRPC into "macos". -->
    <!-- TODO(kkm): Do not place non-tools under tools/, use build/native/bin/. -->
    <!-- TODO(kkm): Do not package windows x64 builds (#13098). -->
    <_Asset PackagePath="tools/windows_x86/" Include="$(Assets_ProtoCompiler)windows_x86/protoc.exe" />
    <_Asset PackagePath="tools/windows_x64/" Include="$(Assets_ProtoCompiler)windows_x64/protoc.exe" />
    <_Asset PackagePath="tools/linux_x86/" Include="$(Assets_ProtoCompiler)linux_x86/protoc" />
    <_Asset PackagePath="tools/linux_x64/" Include="$(Assets_ProtoCompiler)linux_x64/protoc" />
    <_Asset PackagePath="tools/linux_arm64/" Include="$(Assets_ProtoCompiler)linux_aarch64/protoc" />
    <_Asset PackagePath="tools/macosx_x64/" Include="$(Assets_ProtoCompiler)macos_x64/protoc" /> <!-- GPB: macosx-->

    <None Include="@(_Asset)" Pack="true" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework; Microsoft.Build.Utilities.Core" Version="15.6.*" PrivateAssets="all" ExcludeAssets="Runtime" />
    <!--  Set PrivateAssets="All" on all items, even those implicitly added,
          so that they do not become dependencies of this package. -->
    <PackageReference Include="MedallionTopologicalSort" Version="1.0.0"  PrivateAssets="all" />
    <PackageReference Update="@(PackageReference)" PrivateAssets="All" />
  </ItemGroup>

  <Target
    Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput"
    BeforeTargets="BuiltProjectOutputGroup"
    Condition=" '$(GenerateDependencyFile)' == 'true'">

    <ItemGroup>
      <BuiltProjectOutputGroupOutput
          Include="$(ProjectDepsFilePath)"
          TargetPath="$(ProjectDepsFileName)"
          FinalOutputPath="$(ProjectDepsFilePath)" />
    </ItemGroup>
  </Target>

  <Target
      Name="CopyProjectReferencesToPackage"
      DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <!-- the dependencies of your MSBuild task must be packaged inside the package, they cannot be expressed as normal PackageReferences -->
      <BuildOutputInPackage
          Include="..\packages\medalliontopologicalsort\1.0.0\lib\netstandard2.0\MedallionTopologicalSort.dll"
          TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
    </ItemGroup>
    <ItemGroup>
      <!-- the dependencies of your MSBuild task must be packaged inside the package, they cannot be expressed as normal PackageReferences -->
      <BuildOutputInPackage
          Include="@(ReferenceCopyLocalPaths)"
          TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
    </ItemGroup>
  </Target>
</Project>
